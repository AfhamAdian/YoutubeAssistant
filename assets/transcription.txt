in this video i&amp;#39;ll show you what javascript promises are why we need them how to use the special then and catch methods and then how to convert the same code to using the much need to async and await keywords my name is chris roberts when dealing with simple types in javascript such as strings and numbers our code executes sequentially we can assign a string a number and then combine the two values together straight away everything is nice and simple however when writing real world code we often make calls to databases open files and speak to remote apis over the internet now longer running tasks like this will usually not return the results straight away they will rather return a promise now i promise is a special type of object in javascript that represents the eventual completion or failure of an asynchronous operation and its resulting value if this sounds a little bit hard to understand maybe we can imagine it as a real world scenario imagine you are at a restaurant having dinner and you ask the waiter to bring you another cup of coffee the waiter promises to come back with your coffee however you can&amp;#39;t drink it at that point you have to wait until he returns with your coffee and the promise is fulfilled and this is the same sort of concept in javascript if for example you request some information from a remote api then you will be immediately given a promise that task will eventually either complete or fail it&amp;#39;s not until sometime later the promise itself is actually resolved or rejected and you can use a result of that promise so let&amp;#39;s have a look at an example in javascript now imagine you were building an app that suggested things to do when you were bored so you&amp;#39;ll be using the board api and the board api just returns random suggestions of things that you can do along with a number of participants required let&amp;#39;s just keep it really simple by going to the api getting a suggested activity and then logging out the activity to the console now in this example we&amp;#39;re using the axios request library and the get method returns immediately but that doesn&amp;#39;t mean that the request has finished processing what we have is a promise that the request will be fulfilled in the future so this code will fail because the response object is not what we&amp;#39;re expecting so the data and activity properties do not exist so is there any way for us to get access to the result of the request and run code when it returns well thankfully yes because javascript gives us a couple of ways to wait until a task is finished and use the result or catch any errors that occur the first way is by using a couple of special methods on the promise object the first one is called then then is called when the task completes as a parameter it receives the result of the task and the catch method is called if anything goes wrong while processing our request and this receives the error that occurred as a parameter so let&amp;#39;s replace this code use the axios request library and call the get method now because get returns a promise object we can immediately chain on the then method inside our then method we&amp;#39;ll log out to the console the suggested activity from the api then after this we can chain on the catch method this will be called if anything goes wrong while processing our request let&amp;#39;s just log out to the console the error message that is returned then we can run this and see that our console log executes in the right place now to simulate an error occurring in our request let&amp;#39;s replace the url with a call to the http status api this is really useful for testing different status codes and we&amp;#39;ll just request a 404 not found error we can run this again and see that our error is neatly caught by our catch method and printed out to the console it&amp;#39;s worth noting that any code placed after this promised chain will be executed immediately so if we put a console log here at the bottom we&amp;#39;d expect it to be written out after our request returns but actually it gets printed out first this is because only the code inside the then and catch methods is executed after the request returns now this works fine however as you can see the code isn&amp;#39;t particularly nice to look at and if you had a lot of complicated code inside your methods things would soon start to get quite unwieldy so what we need really is a way of receiving the results of our promises sequentially just as if we were dealing with simple types like strings and numbers and this is where the await keyword comes in and await does exactly what it says it allows us to wait until the promise has completed before moving on to the next line this makes our code a lot neater and easier to read javascript requires our await keywords be used inside functions marked with the async keyword so let&amp;#39;s replace our promise chain with a function marked with the async keyword let&amp;#39;s call it getactivity and now we&amp;#39;re going to make the same request to our board api but notice we have the await keyword before the method call and immediately after on our next line of code we can use the response and log out to the console the suggested activity this console logline will not run until the promise resolves or is returned we can call our get activity and we&amp;#39;ll see that our code executes perfectly now because the awake keyword allows us to move this kind of asynchronous code back into the main flow of our app we don&amp;#39;t have access to this specialized catch method to handle any errors that occur so what happens if something goes wrong well because our code executes sequentially we can just wrap this with a normal try catch block inside our catch method we can just log out to the console the error less time to simulate a server error we&amp;#39;ll use the http status api again and this time we&amp;#39;ll request a 500 server error we&amp;#39;ll call our get activity notice our request error has been nicely caught and logged out to the console i hope that has helped to demystify using promises and the async and await keywords in javascript if you enjoy this kind of content then we make videos every week so make sure to subscribe and ring that bell icon so you never miss out on one of our videos thank you so much for watching and we&amp;#39;ll see you next time [Music]